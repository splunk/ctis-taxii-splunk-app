from TA_CTIS_TAXII.package.bin.models.identity import IdentityModelV1, identity_converter
from TA_CTIS_TAXII.package.bin.models.tlp_v2 import TLPv2, AMBER_STRICT_MARKING_DEFINITION
import pytest
from datetime import datetime


def test_unstructure_identity():
    identity = IdentityModelV1(name="Org ABC", identity_class="organization", tlp_v2_rating=TLPv2.GREEN)
    as_dict = identity_converter.unstructure(identity)
    assert as_dict["name"] == "Org ABC"
    assert as_dict["identity_class"] == "organization"
    assert "identity_id" in as_dict, "identity_id should be autogenerated"
    assert as_dict["tlp_v2_rating"] == "TLP:GREEN"

def test_unstructure_with_autoupdated_modified():
    existing_modified = datetime(2024, 1, 1)
    identity = IdentityModelV1(name="Org ABC", identity_class="organization", modified=existing_modified, tlp_v2_rating=TLPv2.RED)
    identity.set_modified_to_now()
    as_dict = identity_converter.unstructure(identity)
    assert as_dict["name"] == "Org ABC"
    assert as_dict["identity_class"] == "organization"
    assert as_dict["modified"] != existing_modified, "modified should be set to now"
    assert as_dict["tlp_v2_rating"] == "TLP:RED"



def test_structure_identity():
    as_dict = {
        "name": "Org ABC",
        "identity_class": "organization",
        "tlp_v2_rating": "TLP:AMBER",
    }
    identity = identity_converter.structure(as_dict, IdentityModelV1)
    assert identity.name == "Org ABC"
    assert identity.identity_class == "organization"
    assert identity.identity_id.startswith("identity--"), "identity_id should be autogenerated"
    assert identity.tlp_v2_rating == TLPv2.AMBER


def test_to_stix():
    identity = IdentityModelV1(name="Org ABC", identity_class="organization", tlp_v2_rating=TLPv2.AMBER_STRICT)
    stix_identity = identity.to_stix()
    assert stix_identity.id.startswith("identity--")
    assert stix_identity.name == "Org ABC"
    assert stix_identity.identity_class == "organization"
    assert stix_identity.created == identity.created
    assert stix_identity.modified == identity.modified
    assert stix_identity.object_marking_refs == [AMBER_STRICT_MARKING_DEFINITION.id]


def test_validate_identity_id():
    with pytest.raises(ValueError) as exc_info:
        IdentityModelV1(identity_id="not valid id", name="name", identity_class="organization", tlp_v2_rating=TLPv2.AMBER)
    assert "Invalid identity_id" in str(exc_info.value)

def test_validate_identity_class():
    with pytest.raises(ValueError) as exc_info:
        IdentityModelV1(name="name", identity_class="invalid class", tlp_v2_rating=TLPv2.GREEN)
    assert "Invalid identity_class" in str(exc_info.value)
