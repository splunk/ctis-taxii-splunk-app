import pytest

from TA_CTIS_TAXII.package.bin.models import GroupingModelV1, SubmissionModelV1, SubmissionStatus, grouping_converter

IDENTITY_ID = "identity--a463ffb3-1bd9-4d94-b02d-74e4f1658283"
INDICATOR_ID = "indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2"


def test_unstructure():
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", context="unspecified",
                               created_by_ref=IDENTITY_ID)
    as_dict = grouping_converter.unstructure(grouping)
    assert as_dict["name"] == "Group ABC"
    assert as_dict["description"] == "Group ABC description"
    assert as_dict["context"] == "unspecified"
    assert as_dict["created_by_ref"] == IDENTITY_ID
    assert as_dict["grouping_id"].startswith("grouping--")


def test_structure():
    as_dict = {
        "name": "Grouping A",
        "description": "Grouping A description",
        "context": "unspecified",
        "created_by_ref": IDENTITY_ID
    }
    grouping = grouping_converter.structure(as_dict, GroupingModelV1)
    assert grouping.name == "Grouping A"
    assert grouping.description == "Grouping A description"
    assert grouping.context == "unspecified"
    assert grouping.created_by_ref == IDENTITY_ID
    assert grouping.grouping_id.startswith("grouping--")

def test_add_submissions():
    submission1 = SubmissionModelV1(
        bundle_json="{}",
        status=SubmissionStatus.SCHEDULED,
        taxii_config_name="taxii_config",
        collection_id="abc123",
    )
    assert submission1.submission_id is not None, "Should be autogenerated"

    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", context="unspecified", created_by_ref=IDENTITY_ID)
    assert len(grouping.submissions) == 0
    grouping.submissions.append(submission1)

    as_dict = grouping_converter.unstructure(grouping)

    restructured_grouping = grouping_converter.structure(as_dict, GroupingModelV1)
    assert len(restructured_grouping.submissions) == 1
    assert restructured_grouping.submissions[0].submission_id == submission1.submission_id
    assert restructured_grouping.submissions[0].bundle_json == "{}"
    assert restructured_grouping.submissions[0].status == SubmissionStatus.SCHEDULED
    assert restructured_grouping.submissions[0].taxii_config_name == "taxii_config"
    assert restructured_grouping.submissions[0].collection_id == "abc123"



def test_to_stix():
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", created_by_ref=IDENTITY_ID,
                               context="unspecified")
    indicator_ids = [INDICATOR_ID]
    stix_obj = grouping.to_stix(object_ids=indicator_ids)
    assert stix_obj.id.startswith("grouping--"), "Should be autogenerated"
    assert stix_obj.created_by_ref == IDENTITY_ID
    assert stix_obj.context == "unspecified"
    assert stix_obj.name == "Group ABC"
    assert stix_obj.description == "Group ABC description"
    assert stix_obj.object_refs == indicator_ids
    assert stix_obj.created == grouping.created
    assert stix_obj.modified == grouping.modified


def test_validate_grouping_id():
    with pytest.raises(ValueError) as exc_info:
        GroupingModelV1(grouping_id="not valid id", name="Group ABC", description="Group ABC description",
                        context="unspecified", created_by_ref=IDENTITY_ID)
    assert "Invalid grouping id" in str(exc_info.value)


def test_validate_context():
    with pytest.raises(ValueError) as exc_info:
        GroupingModelV1(name="Group ABC", description="description",
                        context="invalid", created_by_ref=IDENTITY_ID)
    assert "Invalid context" in str(exc_info.value)
