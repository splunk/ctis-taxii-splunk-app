from datetime import datetime

import pytest

from TA_CTIS_TAXII.package.bin.models import GroupingModelV1, grouping_converter
from TA_CTIS_TAXII.package.bin.models.tlp_v2 import TLPv2, GREEN_MARKING_DEFINITION
from sample_indicator import new_sample_indicator_instance
import attrs

IDENTITY_ID = "identity--a463ffb3-1bd9-4d94-b02d-74e4f1658283"
INDICATOR_ID = "indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2"


def test_unstructure():
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", context="unspecified",
                               created_by_ref=IDENTITY_ID, tlp_v2_rating=TLPv2.GREEN,
                               confidence=50)
    as_dict = grouping_converter.unstructure(grouping)
    assert as_dict["name"] == "Group ABC"
    assert as_dict["description"] == "Group ABC description"
    assert as_dict["context"] == "unspecified"
    assert as_dict["created_by_ref"] == IDENTITY_ID
    assert as_dict["grouping_id"].startswith("grouping--")
    assert as_dict["last_submission_at"] is None
    assert as_dict["tlp_v2_rating"] == "TLP:GREEN"
    assert as_dict["confidence"] == 50


def test_unstructure_with_last_submission_at():
    dt = datetime(2024, 1, 2)
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", context="unspecified",
                               created_by_ref=IDENTITY_ID, last_submission_at=dt, tlp_v2_rating=TLPv2.RED)
    as_dict = grouping_converter.unstructure(grouping)
    assert as_dict["name"] == "Group ABC"
    assert as_dict["description"] == "Group ABC description"
    assert as_dict["context"] == "unspecified"
    assert as_dict["created_by_ref"] == IDENTITY_ID
    assert as_dict["last_submission_at"] == "2024-01-02T00:00:00"
    assert as_dict["tlp_v2_rating"] == "TLP:RED"


def test_structure():
    as_dict = {
        "name": "Grouping A",
        "description": "Grouping A description",
        "context": "unspecified",
        "created_by_ref": IDENTITY_ID,
        "tlp_v2_rating" : "TLP:AMBER",
        "confidence" : 42,
    }
    grouping = grouping_converter.structure(as_dict, GroupingModelV1)
    assert grouping.name == "Grouping A"
    assert grouping.description == "Grouping A description"
    assert grouping.context == "unspecified"
    assert grouping.tlp_v2_rating == TLPv2.AMBER
    assert grouping.created_by_ref == IDENTITY_ID
    assert grouping.grouping_id.startswith("grouping--")
    assert grouping.last_submission_at is None
    assert grouping.confidence == 42


def test_to_stix():
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", created_by_ref=IDENTITY_ID,
                               context="unspecified", tlp_v2_rating=TLPv2.GREEN, confidence=0)
    indicator_ids = [INDICATOR_ID]
    stix_obj = grouping.to_stix(object_ids=indicator_ids)
    assert stix_obj.id.startswith("grouping--"), "Should be autogenerated"
    assert stix_obj.created_by_ref == IDENTITY_ID
    assert stix_obj.context == "unspecified"
    assert stix_obj.name == "Group ABC"
    assert stix_obj.description == "Group ABC description"
    assert stix_obj.object_refs == indicator_ids
    assert stix_obj.created == grouping.created
    assert stix_obj.modified == grouping.modified
    assert stix_obj.object_marking_refs == [GREEN_MARKING_DEFINITION.id]
    assert stix_obj.confidence == 0


def test_validate_grouping_id():
    with pytest.raises(ValueError) as exc_info:
        GroupingModelV1(grouping_id="not valid id", name="Group ABC", description="Group ABC description",
                        context="unspecified", created_by_ref=IDENTITY_ID, tlp_v2_rating=TLPv2.GREEN)
    assert "Invalid grouping id" in str(exc_info.value)


def test_validate_context():
    with pytest.raises(ValueError) as exc_info:
        GroupingModelV1(name="Group ABC", description="description",
                        context="invalid", created_by_ref=IDENTITY_ID, tlp_v2_rating=TLPv2.GREEN)
    assert "Invalid context" in str(exc_info.value)

def test_update_tlp_v2_rating_as_at_least_as_restrictive_as_indicators():
    grouping = GroupingModelV1(name="Group ABC", description="Group ABC description", created_by_ref=IDENTITY_ID,
                               context="unspecified", tlp_v2_rating=TLPv2.CLEAR)
    assert grouping.tlp_v2_rating == TLPv2.CLEAR

    indicators = [
        attrs.evolve(new_sample_indicator_instance(), tlp_v2_rating=TLPv2.AMBER),
        attrs.evolve(new_sample_indicator_instance(), tlp_v2_rating=TLPv2.AMBER_STRICT),
        attrs.evolve(new_sample_indicator_instance(), tlp_v2_rating=TLPv2.GREEN),
    ]
    # Should increase the restrictiveness to be at least as restrictive as the most restrictive indicator
    grouping.update_tlpv2_to_be_at_least_as_restrictive_as_indicators(indicators)
    assert grouping.tlp_v2_rating == TLPv2.AMBER_STRICT

    # Should not decrease the grouping's restrictiveness
    grouping.tlp_v2_rating = TLPv2.RED
    grouping.update_tlpv2_to_be_at_least_as_restrictive_as_indicators(indicators)
    assert grouping.tlp_v2_rating == TLPv2.RED
