from .util import bulk_insert_indicators, create_indicator_form_payload, create_new_indicator, delete_indicator, \
    edit_indicator, example_indicator, get_groupings_collection, get_identities_collection, get_indicators_collection, \
    list_indicators, new_indicator_payload, new_sample_grouping


def assert_collections_are_empty(session):
    assert len(get_groupings_collection(session)) == 0
    assert len(get_identities_collection(session)) == 0
    assert len(get_indicators_collection(session)) == 0


class TestScenarios:
    def test_scenario_add_new_indicator_writes_to_db(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        grouping = new_sample_grouping(session)

        # Validation isn't done on grouping_id, but the UI forces a dropdown selection in the Indicator Form
        payload = create_indicator_form_payload(grouping_id=grouping["grouping_id"], indicators=[example_indicator()])
        create_new_indicator(session, payload=payload)
        indicators = get_indicators_collection(session)
        assert len(indicators) == 1
        indicator = indicators[0]
        assert indicator["splunk_field_name"] == "src_ip"
        assert indicator["indicator_value"] == "123.456.1.2"
        assert indicator["indicator_category"] == "source_ipv4"
        assert indicator["indicator_id"].startswith("indicator--"), "Indicator ID should be autogenerated"
        assert indicator["grouping_id"] == payload["grouping_id"]
        assert indicator["created"] is not None
        assert indicator["modified"] is not None

    def test_list_indicators_no_filter(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        grouping = new_sample_grouping(session)
        indicators_to_add = [example_indicator() for _ in range(5)]
        payload = create_indicator_form_payload(grouping_id=grouping["grouping_id"], indicators=indicators_to_add)
        create_new_indicator(session, payload=payload)
        assert len(get_indicators_collection(session)) == 5

        resp_no_filter = list_indicators(session, skip=0, limit=100, query={})
        indicators_no_filter = resp_no_filter["records"]
        assert len(indicators_no_filter) == 5
        assert resp_no_filter["total"] == 5

    def test_list_indicators_with_query(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        grouping_a = new_sample_grouping(session)
        grouping_a_id = grouping_a["grouping_id"]
        grouping_b = new_sample_grouping(session)
        grouping_b_id = grouping_b["grouping_id"]

        payload_a = create_indicator_form_payload(grouping_id=grouping_a_id,
                                                  indicators=[example_indicator() for _ in range(3)])
        create_new_indicator(session, payload=payload_a)
        payload_b = create_indicator_form_payload(grouping_id=grouping_b_id,
                                                  indicators=[example_indicator() for _ in range(2)])
        create_new_indicator(session, payload=payload_b)
        assert len(get_indicators_collection(session)) == 5

        resp_with_filter = list_indicators(session, skip=0, limit=100, query={
            "grouping_id": grouping_a_id
        })
        indicators_with_filter = resp_with_filter["records"]
        assert len(indicators_with_filter) == 3
        assert resp_with_filter["total"] == 3

        resp_with_filter_2 = list_indicators(session, skip=0, limit=100, query={
            "grouping_id": {"$in": [grouping_a_id, grouping_b_id]}
        })
        indicators_with_filter_2 = resp_with_filter_2["records"]
        assert len(indicators_with_filter_2) == 5
        assert resp_with_filter_2["total"] == 5

    def test_list_indicators_with_60000_records(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        # In limits.conf [kvstore]: max_rows_per_query = 50000
        # https://docs.splunk.com/Documentation/Splunk/9.3.0/Admin/Limitsconf#.5Bkvstore.5D
        # See if "total" is accurate for more than 50000 records
        indicators = [new_indicator_payload() for _ in range(60000)]
        bulk_insert_indicators(session, indicators=indicators)
        indicators_in_collection = get_indicators_collection(session)
        assert len(indicators_in_collection) == 60000

        resp = list_indicators(session=session, skip=0, limit=10)
        assert resp["total"] == 60000
        assert len(resp["records"]) == 10

    def test_edit_indicator(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        grouping = new_sample_grouping(session)
        payload = create_indicator_form_payload(grouping_id=grouping["grouping_id"], indicators=[example_indicator()])
        create_new_indicator(session, payload=payload)
        indicators = get_indicators_collection(session)
        assert len(indicators) == 1
        indicator = indicators[0]
        assert indicator["indicator_value"] == "123.456.1.2"

        new_payload = {
            "indicator_id": indicator["indicator_id"],
            "indicator_value": "1.2.3.4",
        }
        edit_indicator(session, payload=new_payload)
        indicators_2 = list_indicators(session, skip=0, limit=100)
        assert len(indicators_2["records"]) == 1
        edited_indicator = indicators_2["records"][0]
        assert edited_indicator["indicator_value"] == "1.2.3.4"

    def test_delete_indicator(self, session, cleanup_all_collections):
        assert_collections_are_empty(session)
        payload = create_indicator_form_payload(grouping_id=new_sample_grouping(session)["grouping_id"],
                                                indicators=[example_indicator()])
        create_new_indicator(session, payload=payload)

        indicators = get_indicators_collection(session)
        assert len(indicators) == 1
        indicator = indicators[0]

        delete_indicator(session, indicator_id=indicator["indicator_id"])
        indicators_2 = list_indicators(session, skip=0, limit=100)
        assert len(indicators_2["records"]) == 0
        assert indicators_2["total"] == 0
