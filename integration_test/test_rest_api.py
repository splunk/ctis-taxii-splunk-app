import pytest
import os
import requests
import uuid

SPLUNK_ADMIN_URL = 'https://localhost:8099'
SPLUNK_USERNAME = os.environ['SPLUNK_USERNAME']
SPLUNK_PASSWORD = os.environ['SPLUNK_PASSWORD']
CTIS_APP_NAME = 'TA_CTIS_TAXII'
"""
List of test scenarios:
- create 2 new groupings, then:
    - list groupings
    - query groupings with filter by property?
    - cleanup groupings
- create new indicator, then:
    - list indicators
    - query indicators with filter by property?
    - cleanup indicators
- create 2 new indicators, then:
    - list indicators
    - query indicators with filter by property?
    - cleanup
- suggest STIX pattern for:
    - a known splunk field
    - an unknown splunk field -> non-200 response

"""


@pytest.fixture
def session():
    session = requests.Session()
    session.auth = (SPLUNK_USERNAME, SPLUNK_PASSWORD)
    session.verify = False
    return session


DEFAULT_REQUEST_PARAMS = {
    "output_mode": "json"
}


def get_indicators_collection(session) -> list:
    # TODO: set page size to infinite?
    resp = session.get(f'{SPLUNK_ADMIN_URL}/servicesNS/nobody/{CTIS_APP_NAME}/storage/collections/data/indicators',
                       params=DEFAULT_REQUEST_PARAMS)
    resp.raise_for_status()
    j = resp.json()
    assert type(j) == list
    return j


def clear_indicators_collection(session):
    resp = session.delete(f'{SPLUNK_ADMIN_URL}/servicesNS/nobody/{CTIS_APP_NAME}/storage/collections/data/indicators',
                          params=DEFAULT_REQUEST_PARAMS)
    resp.raise_for_status()


def create_new_indicator(session, payload: dict) -> dict:
    resp = session.post(f'{SPLUNK_ADMIN_URL}/servicesNS/-/{CTIS_APP_NAME}/create-indicator',
                        params=DEFAULT_REQUEST_PARAMS, json=payload)
    resp.raise_for_status()
    return resp.json()


@pytest.fixture
def cleanup_indicators_collection(session):
    clear_indicators_collection(session)
    yield
    clear_indicators_collection(session)


class TestVerifySplunkIsUp:
    def test_splunk_is_up(self, session):
        resp = session.get(SPLUNK_ADMIN_URL)
        resp.raise_for_status()

    def test_verify_app_is_installed(self, session):
        resp = session.get(f'{SPLUNK_ADMIN_URL}/services/apps/local/{CTIS_APP_NAME}', params=DEFAULT_REQUEST_PARAMS)
        resp.raise_for_status()
        j = resp.json()
        entries = j["entry"]
        assert len(entries) == 1
        entry = entries[0]
        assert entry["name"] == CTIS_APP_NAME


class TestScenarios:
    def test_scenario_add_new_indicator_then_query(self, session, cleanup_indicators_collection):
        indicators = get_indicators_collection(session)
        assert len(indicators) == 0
        payload = {
            "splunk_field_name": "dest_ip",
            "splunk_field_value": "1.2.3.4",
            "grouping_id": f"grouping--{uuid.uuid4()}",
            "name": "Name",
            "description": "Description",
            "stix_pattern": "[network-traffic:dst_ref.type = 'ipv4-addr' AND network-traffic:dst_ref.value = '127.0.0.1']",
            "tlp_v1_rating": "WHITE",
            "valid_from": "2024-08-16T23:00:22",
            "confidence": 50
        }
        create_new_indicator(session, payload=payload)
        indicators = get_indicators_collection(session)
        assert len(indicators) == 1
        indicator = indicators[0]
        assert indicator["splunk_field_name"] == "dest_ip"
        assert indicator["splunk_field_value"] == "1.2.3.4"
        assert indicator["indicator_id"].startswith("indicator--"), "Indicator ID should be autogenerated"
        assert indicator["grouping_id"] == payload["grouping_id"]
